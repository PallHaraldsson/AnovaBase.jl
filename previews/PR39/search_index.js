var documenterSearchIndex = {"docs":
[{"location":"FixedEffectModels/#FixedEffectModels","page":"FixedEffectModels","title":"FixedEffectModels","text":"","category":"section"},{"location":"FixedEffectModels/","page":"FixedEffectModels","title":"FixedEffectModels","text":"using MixedAnova, Pkg\nfem_init()\nPkg.activate(joinpath(\"..\", \"..\", \"test\"))\nPkg.instantiate()\nusing DataFrames, CSV, CategoricalArrays\ngpa = CSV.read(joinpath(\"..\", \"..\", \"data\", \"gpa.csv\"), DataFrame)\ntransform!(gpa,\n        7 => x->replace(x, \"yes\" => true, \"no\" => false, \"NA\" => missing),\n        4 => x->categorical(x, levels = [\"1 hour\", \"2 hours\", \"3 hours\"], ordered = true),\n        renamecols = false)\ntransform!(gpa, [1, 2, 5, 7] .=> categorical, renamecols = false)\nPkg.activate(joinpath(\"..\", \"..\"))","category":"page"},{"location":"FixedEffectModels/","page":"FixedEffectModels","title":"FixedEffectModels","text":"fem_init()","category":"page"},{"location":"FixedEffectModels/","page":"FixedEffectModels","title":"FixedEffectModels","text":"This package also supports FixedEffectModels; however, because anova relies on model schama, the output of FixedEffectModels.reg is not compatible. ","category":"page"},{"location":"FixedEffectModels/","page":"FixedEffectModels","title":"FixedEffectModels","text":"To solve this issue, fitting model using lfe instead of reg.","category":"page"},{"location":"FixedEffectModels/","page":"FixedEffectModels","title":"FixedEffectModels","text":"fem1 = lfe(@formula(gpa ~ fe(student) + occasion + job), gpa)","category":"page"},{"location":"FixedEffectModels/","page":"FixedEffectModels","title":"FixedEffectModels","text":"If a model is already fitted by reg, use to_trm to convert it into StatsModels.TableRegressionModel.","category":"page"},{"location":"FixedEffectModels/","page":"FixedEffectModels","title":"FixedEffectModels","text":"model = reg(gpa, @formula(gpa ~ fe(student) + occasion + job))\nfem1 = to_trm(model, gpa);\naovf = anova(fem1)","category":"page"},{"location":"FixedEffectModels/","page":"FixedEffectModels","title":"FixedEffectModels","text":"note: Note\nCurrently, only F-test is available.","category":"page"},{"location":"GLM/#GLM","page":"GLM","title":"GLM","text":"","category":"section"},{"location":"GLM/","page":"GLM","title":"GLM","text":"using MixedAnova, Pkg\nglm_init()\nPkg.activate(joinpath(\"..\", \"..\", \"test\"))\nPkg.instantiate()\nusing RDatasets, DataFrames\niris = dataset(\"datasets\", \"iris\")\nquine = dataset(\"MASS\", \"quine\")\nmtcars = dataset(\"datasets\", \"mtcars\")\nPkg.activate(joinpath(\"..\", \"..\"))","category":"page"},{"location":"GLM/","page":"GLM","title":"GLM","text":"To use anova on GLM objects , we need to initiate some files first.","category":"page"},{"location":"GLM/","page":"GLM","title":"GLM","text":"glm_init()","category":"page"},{"location":"GLM/","page":"GLM","title":"GLM","text":"This function will export all functions from GLM and related function in this package, including anova, anova_lm, anova_glm.","category":"page"},{"location":"GLM/#Ordinary-linear-model","page":"GLM","title":"Ordinary linear model","text":"","category":"section"},{"location":"GLM/","page":"GLM","title":"GLM","text":"We first import the well-known iris dataset from RDatasets.","category":"page"},{"location":"GLM/","page":"GLM","title":"GLM","text":"iris = dataset(\"datasets\", \"iris\")","category":"page"},{"location":"GLM/","page":"GLM","title":"GLM","text":"There's two way to perform ANOVA. anova_lm accepts a formula and data like GLM.lm.","category":"page"},{"location":"GLM/","page":"GLM","title":"GLM","text":"anova_lm(@formula(SepalLength ~ SepalWidth + PetalLength + PetalWidth + Species), iris)","category":"page"},{"location":"GLM/","page":"GLM","title":"GLM","text":"We can specify the type of sum of squares by keyword argument type. Let's use type II SS.","category":"page"},{"location":"GLM/","page":"GLM","title":"GLM","text":"anova_lm(@formula(SepalLength ~ SepalWidth + PetalLength + PetalWidth + Species), iris, type = 2)","category":"page"},{"location":"GLM/","page":"GLM","title":"GLM","text":"A StatsModels.TableRegressionModel object is fitted and stored in the output of anova_lm.  ","category":"page"},{"location":"GLM/","page":"GLM","title":"GLM","text":"We can fit a model first and call anova instead. anova store the model as well.","category":"page"},{"location":"GLM/","page":"GLM","title":"GLM","text":"warn: Warn\nIt doesn't create a copy, so any in-place change of the original model should be noticed. ","category":"page"},{"location":"GLM/","page":"GLM","title":"GLM","text":"lm1 = lm(@formula(SepalLength ~ SepalWidth + PetalLength + PetalWidth + Species), iris)\nanova(lm1, type = 3)","category":"page"},{"location":"GLM/","page":"GLM","title":"GLM","text":"Multiple models can be compared through the same function.  ","category":"page"},{"location":"GLM/","page":"GLM","title":"GLM","text":"note: Note\nThe checker for nested models is not implemented now, so it should be ensured that the later model is more saturated than the previous one.  ","category":"page"},{"location":"GLM/","page":"GLM","title":"GLM","text":"lms = nestedmodels(LinearModel, @formula(SepalLength ~ SepalWidth * Species), iris, dropcollinear = false)\nanova(lms...)","category":"page"},{"location":"GLM/","page":"GLM","title":"GLM","text":"This result is a little bit different from GLM.ftest:","category":"page"},{"location":"GLM/","page":"GLM","title":"GLM","text":"ftest(getproperty.(lms[2:end], :model)...)","category":"page"},{"location":"GLM/","page":"GLM","title":"GLM","text":"In anova, the F value is calculated by dividing MSR (mean of ΔDeviance) with mean of RSS of saturated model just like anova in R, while in GLM.ftest, the denominator is replaced by RSS of subsequant model.","category":"page"},{"location":"GLM/#Generalized-linear-models","page":"GLM","title":"Generalized linear models","text":"","category":"section"},{"location":"GLM/","page":"GLM","title":"GLM","text":"quine = dataset(\"MASS\", \"quine\")","category":"page"},{"location":"GLM/","page":"GLM","title":"GLM","text":"We fit a negative binomial regression on quine dataset from MASS.","category":"page"},{"location":"GLM/","page":"GLM","title":"GLM","text":"nbm = glm(@formula(Days ~ Eth + Sex + Age + Lrn), quine, NegativeBinomial(2.0), LogLink())\nanova(nbm)","category":"page"},{"location":"GLM/","page":"GLM","title":"GLM","text":"There's also anova_glm similar to anova_lm.  ","category":"page"},{"location":"GLM/","page":"GLM","title":"GLM","text":"anova will automatically select test from F-test or likelihood-ratio test depending on the type of distribution. For distribution of Bernoulli(), Binomial(), Poisson() that have fixed dispersion, likelihood-ratio test is preferred. For other distribution, F-test is preferred.  ","category":"page"},{"location":"GLM/","page":"GLM","title":"GLM","text":"The next one is an axample of logistic regression.","category":"page"},{"location":"GLM/","page":"GLM","title":"GLM","text":"mtcars = dataset(\"datasets\", \"mtcars\")","category":"page"},{"location":"GLM/","page":"GLM","title":"GLM","text":"We want to predict if the AM is 0 or 1. Let's use logistic regression with and without interaction terms, and compare this two models by likelihood-ratio test. ","category":"page"},{"location":"GLM/","page":"GLM","title":"GLM","text":"glm1 = glm(@formula(AM ~ Cyl + HP + WT), mtcars, Binomial(), LogitLink())\nglm2 = glm(@formula(AM ~ Cyl * HP * WT), mtcars, Binomial(), LogitLink())\nanova(glm1, glm2)","category":"page"},{"location":"GLM/","page":"GLM","title":"GLM","text":"lrtest(glm1, glm2)","category":"page"},{"location":"GLM/","page":"GLM","title":"GLM","text":"This function works identically as StatsModels.lrtest.","category":"page"},{"location":"GLM/","page":"GLM","title":"GLM","text":"note: Note\nWe can also specify test by keword arguments test or putting test in the first argument.","category":"page"},{"location":"MixedModels/#MixedModels","page":"MixedModels","title":"MixedModels","text":"","category":"section"},{"location":"MixedModels/","page":"MixedModels","title":"MixedModels","text":"using MixedAnova, Pkg\nmm_init()\nPkg.activate(joinpath(\"..\", \"..\", \"test\"))\nPkg.instantiate()\nusing DataFrames, GLM, CSV, CategoricalArrays\nanxiety = CSV.read(joinpath(\"..\", \"..\", \"data\", \"anxiety.csv\"), DataFrame)\ntransform!(anxiety, :id => categorical, renamecols = false)\ntoenail = CSV.read(joinpath(\"..\", \"..\", \"data\", \"toenail.csv\"), DataFrame)\ntransform!(toenail, [1, 2, 3] .=> categorical, renamecols = false)\nPkg.activate(joinpath(\"..\", \"..\"))","category":"page"},{"location":"MixedModels/","page":"MixedModels","title":"MixedModels","text":"The implementation of ANOVA for mixed-effects models is primarily based on MixedModels. The syntax is similar to anova for GLM.    Likewise, to enable MixedModels fuctionality: ","category":"page"},{"location":"MixedModels/","page":"MixedModels","title":"MixedModels","text":"mm_init()","category":"page"},{"location":"MixedModels/#Linear-mixed-effects-model","page":"MixedModels","title":"Linear mixed-effects model","text":"","category":"section"},{"location":"MixedModels/","page":"MixedModels","title":"MixedModels","text":"We get a dataset from R directly by RCall.","category":"page"},{"location":"MixedModels/","page":"MixedModels","title":"MixedModels","text":"R\"\"\"data(\"anxiety\", package = \"datarium\")\"\"\"\nanxiety = stack(rcopy(R\"anxiety\"), [:t1, :t2, :t3], [:id, :group], variable_name = :time, value_name = :score); anxiety = combine(anxiety, Not(:time), :time => ByRow(x->parse(Int, replace(String(x), \"t\"=>\"\"))) => :time)","category":"page"},{"location":"MixedModels/","page":"MixedModels","title":"MixedModels","text":"We can fit a linear mixed-effects model first. lme is an alias for fit(LinearMixedModel, formula, data, args...).","category":"page"},{"location":"MixedModels/","page":"MixedModels","title":"MixedModels","text":"lmm1 = lme(@formula(score ~ group * time + (1|id)), anxiety)\nanova(lmm1)","category":"page"},{"location":"MixedModels/","page":"MixedModels","title":"MixedModels","text":"Alternatively, we can use anova_lme. Like anova_lm, this function will fit and store a model; in this case, a LinearMixedModel fit by REML.","category":"page"},{"location":"MixedModels/","page":"MixedModels","title":"MixedModels","text":"aov = anova_lme(@formula(score ~ group * time + (1|id)), anxiety, type = 3)","category":"page"},{"location":"MixedModels/","page":"MixedModels","title":"MixedModels","text":"aov.model.optsum.REML","category":"page"},{"location":"MixedModels/","page":"MixedModels","title":"MixedModels","text":"note: Note\nType 2 sum of squares is not implemented now.  ","category":"page"},{"location":"MixedModels/","page":"MixedModels","title":"MixedModels","text":"For likeihood-ratio test, all submodels are fitted. The model should be fitted by maximum likelihood estimation.","category":"page"},{"location":"MixedModels/","page":"MixedModels","title":"MixedModels","text":"anova(LRT, lmm1)","category":"page"},{"location":"MixedModels/","page":"MixedModels","title":"MixedModels","text":"When comparing multiple mixed models, likelihood-ratio test is used by default.  It's also identical to StatsModels.lrtest and MixedModels.likelihoodratiotest.","category":"page"},{"location":"MixedModels/","page":"MixedModels","title":"MixedModels","text":"lmms = nestedmodels(lmm1)\nanova(lmms...)","category":"page"},{"location":"MixedModels/","page":"MixedModels","title":"MixedModels","text":"MixedModels.likelihoodratiotest(lmms[2:end]...)","category":"page"},{"location":"MixedModels/","page":"MixedModels","title":"MixedModels","text":"Comparing between LinearModel and LinearMixedModel is also available.","category":"page"},{"location":"MixedModels/","page":"MixedModels","title":"MixedModels","text":"lm1 = lm(@formula(score ~ group * time), anxiety)\nlmm2 = lme(@formula(score ~ group * time + (group|id)), anxiety)\nanova(lm1, lmm1, lmm2)","category":"page"},{"location":"MixedModels/#Generalized-linear-mixed-effects-model","page":"MixedModels","title":"Generalized linear mixed-effects model","text":"","category":"section"},{"location":"MixedModels/","page":"MixedModels","title":"MixedModels","text":"The following is an example of generalized mixed model. glme is an alias for fit(GeneralizedLinearMixedModel, formula, data, args...).","category":"page"},{"location":"MixedModels/","page":"MixedModels","title":"MixedModels","text":"R\"\"\"data(\"toenail\", package = \"HSAUR2\")\"\"\"\ntoenail = rcopy(R\"toenail\")","category":"page"},{"location":"MixedModels/","page":"MixedModels","title":"MixedModels","text":"glmm1 = glme(@formula(outcome ~ visit + treatment + (1|patientID)), toenail, Binomial(), LogitLink(), nAGQ = 20, wts = ones(Float64, size(toenail, 1)));\nglmm2 = glme(@formula(outcome ~ visit * treatment + (1|patientID)), toenail, Binomial(), LogitLink(), nAGQ = 20, wts = ones(Float64, size(toenail, 1)));\nglm1 = glm(@formula(outcome ~ visit + treatment), toenail, Binomial(), LogitLink());\nanova(glm1, glmm1, glmm2)","category":"page"},{"location":"MixedModels/","page":"MixedModels","title":"MixedModels","text":"note: Note\nOnly likelihood-ratio test is available now.","category":"page"},{"location":"#MixedAnova.jl-Documentation","page":"MixedAnova.jl Documentation","title":"MixedAnova.jl Documentation","text":"","category":"section"},{"location":"","page":"MixedAnova.jl Documentation","title":"MixedAnova.jl Documentation","text":"MixedAnova.jl is a Julia package providing functionality of Analysis of Varaincae (ANOVA) for various types of julia statistical models. It is similar to function anova in R.","category":"page"},{"location":"#Functionality-overview","page":"MixedAnova.jl Documentation","title":"Functionality overview","text":"","category":"section"},{"location":"#anova","page":"MixedAnova.jl Documentation","title":"anova","text":"","category":"section"},{"location":"","page":"MixedAnova.jl Documentation","title":"MixedAnova.jl Documentation","text":"anova(<model>; <type>, <test>)\nanova(<test>, <model>; <type>)\nanova(<models>; <test>)\nanova(<test>, <models>)\n\nanova_lm(<formula>, <data>; <type>, <test>)\nanova_lm(<test>, <formula>, <data>; <type>)\nanova_glm(<formula>, <data>, <distr>, <link>; <type>, <test>)\nanova_glm(<test>, <formula>, <data>, <distr>, <link>; <type>)\nanova_lme(<formula>, <data>; <type>, <test>)\nanova_lme(<test>, <formula>, <data>; <type>)\nanova_lfe(<formula>, <data>, <vcov>; <type>, <test>)\nanova_lfe(<test>, <formula>, <data>, <vcov>; <type>)","category":"page"},{"location":"#nestedmodels","page":"MixedAnova.jl Documentation","title":"nestedmodels","text":"","category":"section"},{"location":"","page":"MixedAnova.jl Documentation","title":"MixedAnova.jl Documentation","text":"nestedmodels(<modeltype>, <formula>, <data>)\nnestedmodels(<model>)","category":"page"},{"location":"#Usage","page":"MixedAnova.jl Documentation","title":"Usage","text":"","category":"section"},{"location":"","page":"MixedAnova.jl Documentation","title":"MixedAnova.jl Documentation","text":"The usage is integrated with GLM.jl, MixedModels.jl and FixedEffectModels.jl. The examples below are just for dementration of ANOVA. To understand details of models, please refer to each documentations.","category":"page"},{"location":"","page":"MixedAnova.jl Documentation","title":"MixedAnova.jl Documentation","text":"Pages = [\n    \"GLM.md\",\n    \"MixedModels.md\",\n    \"FixedEffectModels.md\",\n    \"API.md\"\n]\nDepth = 2","category":"page"},{"location":"API/","page":"API","title":"API","text":"CurrentModule = MixedAnova","category":"page"},{"location":"API/#API","page":"API","title":"API","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"Modules = [MixedAnova]\nOrder   = [:type, :function]\nPrivate = false","category":"page"},{"location":"API/#Type","page":"API","title":"Type","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"Modules = [MixedAnova]\nOrder   = [:type]\nPrivate = false","category":"page"},{"location":"API/#MixedAnova.AnovaResult","page":"API","title":"MixedAnova.AnovaResult","text":"AnovaResult{M, T, N}\n\nReturned object of anova. \n\nM is a subtype of Tuple if multiple models are provided; otherwise, a typeof model. \n\nT is a subtype of GoodnessOfFit; either FTest or LRT. \n\nN is the length of parameters.\n\nFields\n\nmodel: full model or tuple of tested models.\ntype: type of anova.\ndof: degree of freedoms of models or factors.\ndeviance: deviance(s) for calculating test statistics. See deviance for more details.\nteststat: value(s) of test statiscics.\npval: p-value(s) of test statiscics.\ntests: NamedTuple contained extra statistics.\n\n\n\n\n\n","category":"type"},{"location":"API/#MixedAnova.FTest","page":"API","title":"MixedAnova.FTest","text":"struct FTest <: GoodnessOfFit end\n\nANOVA by F-test. It can be the first argument or keyword argument test.\n\n\n\n\n\n","category":"type"},{"location":"API/#MixedAnova.GoodnessOfFit","page":"API","title":"MixedAnova.GoodnessOfFit","text":"abstract type GoodnessOfFit end\n\n\n\n\n\n","category":"type"},{"location":"API/#MixedAnova.LRT","page":"API","title":"MixedAnova.LRT","text":"const LRT = LikelihoodRatioTest\n\nSee LikelihoodRatioTest.\n\n\n\n\n\n","category":"type"},{"location":"API/#MixedAnova.LikelihoodRatioTest","page":"API","title":"MixedAnova.LikelihoodRatioTest","text":"struct LikelihoodRatioTest <: GoodnessOfFit end\nconst LRT = LikelihoodRatioTest\n\nANOVA by Likelihood-ratio test. It can be the first argument or keyword argument test.\n\n\n\n\n\n","category":"type"},{"location":"API/#ANOVA","page":"API","title":"ANOVA","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"anova\nanova_lm\nanova_glm\nanova_lme\nanova_lfe","category":"page"},{"location":"API/#MixedAnova.anova","page":"API","title":"MixedAnova.anova","text":"anova(<models>...; test::Type{<: GoodnessOfFit})\n\nAnalysis of variance. \n\nReturn AnovaResult{M, test, N}. See AnovaResult for details.\n\nmodels: model objects\nTableRegressionModel{<: LinearModel} fit by GLM.lm\nTableRegressionModel{<: GeneralizedLinearModel} fit by GLM.glm\nLinearMixedModel fit by MixedAnova.lme or fit(LinearMixedModel, ...)\nIf mutiple models are provided, they should be nested and the last one is the most saturated.\ntest: test statistics for goodness of fit. Available tests are LikelihoodRatioTest (LRT) and FTest. \nIf no test argument is provided, the function will automatically determine based on the model type:\nTableRegressionModel{<: LinearModel}: FTest.\nTableRegressionModel{<: GeneralizedLinearModel}: based on distribution function, see canonicalgoodnessoffit.\nLinearMixedModel: FTest for one model fit; LRT for nested models.\n\nWhen multiple models are provided:  \n\ncheck: allows to check if models are nested. Defalut value is true. Some checkers are not implemented now.\nisnested: true when models are checked as nested (manually or automatically). Defalut value is false. \n\nFor fitting new models and conducting anova at the same time, \n\nsee anova_lm for LinearModel, anova_glm for GeneralizedLinearModel, anova_lme for LinearMixedModel.\n\n\n\n\n\nanova(::Type{FTest}, <model>; kwargs...)\nanova(::Type{FTest}, <models>...; kwargs...)\n\nAnalysis of Variance by F-test. \n\nReturn AnovaResult{M, FTest, N}. See AnovaResult for details.\n\ntype specifies type of anova: \nOne LinearModel or GeneralizedLinearModel: 1, 2, 3 are valid\nOne LinearMixedModel: 1, 3 are valid. \nOthers: only 1 is valid.  \nadjust_sigma determines if adjusting to REML when LinearMixedModel is fit by maximum likelihood.  \nThe result will be slightly deviated from that of model fit by REML.\n\n\n\n\n\nanova(::Type{LRT}, <model>; kwargs...)\nanova(::Type{LRT}, <models>...; kwargs...)\n\nAnalysis of Variance by likelihood-ratio test. \n\nReturn AnovaResult{M, LRT, N}. See AnovaResult for details.\n\n\n\n\n\n","category":"function"},{"location":"API/#MixedAnova.anova_lm","page":"API","title":"MixedAnova.anova_lm","text":"anova_lm(X, y; test::Type{T} = FTest, <keyword arguments>) \n\nanova_lm(test::Type{T}, X, y; <keyword arguments>)\n\nanova(test::Type{T}, ::Type{LinearModel}, X, y; \n    type::Int = 1, \n    <keyword arguments>)\n\nANOVA for simple linear regression.\n\nThe arguments X and y can be a Matrix and a Vector or a Formula and a DataFrame. \n\ntype specifies type of anova.\ndropcollinear controls whether or not lm accepts a model matrix which is less-than-full rank. If true (the default), only the first of each set of linearly-dependent columns  \n\nis used. The coefficient for redundant linearly dependent columns is 0.0 and all associated statistics are set to NaN.\n\nanova_lm generate a TableRegressionModel object, which is fitted by lm.\n\n\n\n\n\n","category":"function"},{"location":"API/#MixedAnova.anova_glm","page":"API","title":"MixedAnova.anova_glm","text":"anova_glm(X, y, d::UnivariateDistribution, l::Link = canonicallink(d); \n        test::Type{T} = canonicalgoodnessoffit(d), <keyword arguments>)\n\nanova_glm(test::Type{T}, X, y, d::UnivariateDistribution, l::Link = canonicallink(d); <keyword arguments>)\n\nanova(test::Type{T}, X, y, d::UnivariateDistribution, l::Link = canonicallink(d); <keyword arguments>)\n\nANOVA for genaralized linear models.\n\nd: a GLM.UnivariateDistribution.\nl: a GLM.Link\n\nFor other keyword arguments, see fit.\n\n\n\n\n\n","category":"function"},{"location":"API/#MixedAnova.anova_lme","page":"API","title":"MixedAnova.anova_lme","text":"anova_lme(f::FormulaTerm, tbl; test::Type{<: GoodnessOfFit} = FTest, <keyword arguments>)\n\nanova_lme(test::Type{<: GoodnessOfFit}, f::FormulaTerm, tbl; <keyword arguments>)\n\nanova(test::Type{<: GoodnessOfFit}, ::Type{<: LinearMixedModel}, f::FormulaTerm, tbl;\n        type::Int = 1, \n        adjust_sigma::Bool = true, <keyword arguments>)\n\nANOVA for linear mixed-effect models.\n\nThe arguments f and tbl are Formula and DataFrame.\n\ntest: GoodnessOfFit. The default is FTest.\ntype: type of anova. Only 1, 3 are valid.\nadjust_sigma determines whether adjust σ to match that of linear mixed-effect model fit by REML. The result will be slightly deviated from that of model fit by REML.\n\nOther keyword arguments\n\nwts = []\ncontrasts = Dict{Symbol,Any}()\nprogress::Bool = true\nREML::Bool = true\n\nanova_lme generate a LinearMixedModel object which is fit by lme with REML if applying FTest; otherwise with ML.\n\n\n\n\n\n","category":"function"},{"location":"API/#MixedAnova.anova_lfe","page":"API","title":"MixedAnova.anova_lfe","text":"anova_lfe(X, y, vcov::CovarianceEstimator = Vcov.simple(); \n        test::Type{<: GoodnessOfFit} = FTest, <keyword arguments>)\nanova_lfe(test::Type{<: GoodnessOfFit}, X, y, vcov::CovarianceEstimator = Vcov.simple(); <keyword arguments>)\n\nANOVA for fixed-effect linear regression.\n\nThe arguments X and y are a Formula and a DataFrame. \n\ntype: type of anova.\n\nanova_lfe generate a TableRegressionModel object, which is fitted by lfe.\n\n\n\n\n\n","category":"function"},{"location":"API/#Model-fit","page":"API","title":"Model fit","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"nestedmodels\nGLM.glm(::FormulaTerm, ::DataFrame, ::Binomial, ::Link, ::Vararg{Any})\nlme\nglme\nlfe\nto_trm","category":"page"},{"location":"API/#MixedAnova.nestedmodels","page":"API","title":"MixedAnova.nestedmodels","text":"nestedmodels(trm::TableRegressionModel{<: LinearModel}; null::Bool = false, <keyword arguments>)\nnestedmodels(trm::TableRegressionModel{<: GeneralizedLinearModel}; null::Bool = false, <keyword arguments>)\nnestedmodels(model::LinearMixedModel; null::Bool = false, <keyword arguments>)\n\nnestedmodels(::Type{LinearModel}, formula, data; null::Bool = true, <keyword arguments>)\nnestedmodels(::Type{GeneralizedLinearModel}, formula, data, distr::UnivariateDistribution, link::Link = canonicallink(d); null::Bool = true, <keyword arguments>)\nnestedmodels(::Type{LinearMixedModel}, f::FormulaTerm, tbl; null::Bool = true, wts = [], contrasts = Dict{Symbol, Any}(), verbose::Bool = false, REML::Bool = false)\n\nGenerate nested models from a model or formula and data. \n\nThe null model will be a model with at least one factor (including intercept) if the link function does not allow factors to be 0 (factors in denominators). \n\nInverseLink for Gamma\nInverseSquareLink for InverseGaussian\nLinearModel fitted with CholeskyPivoted when dropcollinear = true\n\nOtherwise, it will be an empty model.\n\n\n\n\n\n","category":"function"},{"location":"API/#GLM.glm-Tuple{FormulaTerm, DataFrames.DataFrame, Binomial, Link, Vararg{Any}}","page":"API","title":"GLM.glm","text":"GLM.glm(f, df::DataFrame, d::Binomial, l::GLM.Link, args...; kwargs...)\n\nAutomatically transform dependent variable into 0/1 for family Binomial.\n\n\n\n\n\n","category":"method"},{"location":"API/#MixedAnova.lme","page":"API","title":"MixedAnova.lme","text":"lme(f::FormulaTerm, tbl; wts, contrasts, progress, REML)\n\nAn alias for fit(LinearMixedModel, f, tbl; wts, contrasts, progress, REML).\n\n\n\n\n\n","category":"function"},{"location":"API/#MixedAnova.glme","page":"API","title":"MixedAnova.glme","text":"glme(f::FormulaTerm, tbl, d::Distribution, l::Link; kwargs...)\n\nAn alias for fit(GeneralizedLinearMixedModel, f, tbl, d, l; kwargs...)\n\n\n\n\n\n","category":"function"},{"location":"API/#MixedAnova.lfe","page":"API","title":"MixedAnova.lfe","text":"lfe(formula::FormulaTerm, df, vcov::CovarianceEstimator = Vcov.simple(); kwargs...)\n\nFit a FixedEffectModel and wrap it into TableRegressionModel.  Because of ModelFrame and ModelMatrix, this function cost more time and allocs than reg, which is proportional to number of factors(without fixed effects). \n\n\n\n\n\n","category":"function"},{"location":"API/#MixedAnova.to_trm","page":"API","title":"MixedAnova.to_trm","text":"to_trm(model, df)\n\nWrap fitted FixedEffectModel into TableRegressionModel.\n\n\n\n\n\n","category":"function"},{"location":"API/#Attributes","page":"API","title":"Attributes","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"formula\nanova_test\nanova_type\npval\nteststat\ncoefnames\ndeviance\ndof\ndof_residual\nnobs","category":"page"},{"location":"API/#MixedAnova.formula","page":"API","title":"MixedAnova.formula","text":"formula(trm::TableRegressionModel)\nformula(model::MixedModel)\n\nUnify formula api.\n\n\n\n\n\n","category":"function"},{"location":"API/#MixedAnova.anova_test","page":"API","title":"MixedAnova.anova_test","text":"anova_test(::AnovaResult)\n\nTest statiscics of anova.\n\n\n\n\n\n","category":"function"},{"location":"API/#MixedAnova.anova_type","page":"API","title":"MixedAnova.anova_type","text":"anova_type(aov::AnovaResult)\n\nType of anova.\n\n\n\n\n\n","category":"function"},{"location":"API/#MixedAnova.pval","page":"API","title":"MixedAnova.pval","text":"teststat(aov::AnovaResult)\n\nP-values of test statiscics of anova.\n\n\n\n\n\n","category":"function"},{"location":"API/#MixedAnova.teststat","page":"API","title":"MixedAnova.teststat","text":"teststat(aov::AnovaResult)\n\nValues of test statiscics of anova.\n\n\n\n\n\n","category":"function"},{"location":"API/#StatsAPI.coefnames","page":"API","title":"StatsAPI.coefnames","text":"coefnames(<model>, anova::Val{:anova})\ncoefnames(<term>, anova::Val{:anova})\n\nCustomize coefnames for anova.\n\n\n\n\n\n","category":"function"},{"location":"API/#StatsAPI.deviance","page":"API","title":"StatsAPI.deviance","text":"deviance(aov::AnovaResult)\n\nReturn the stored devaince. The value repressents different statistics for different models and tests.\n\nLinearModel: Sum of Squares.\nGeneralizedLinearModel: deviance(model)\nLinearMixedModel: NaN when applying FTest; -2loglikelihood(model) == deviance(model) when applying LRT.\n\nWhen LinearModel is compared to LinearMixedModel, the deviance is alternatively -2loglikelihood(model).\n\n\n\n\n\n","category":"function"},{"location":"API/#StatsAPI.dof","page":"API","title":"StatsAPI.dof","text":"dof(aov::AnovaResult)\n\nDegree of freedom of models or factors.\n\n\n\n\n\n","category":"function"},{"location":"API/#StatsAPI.dof_residual","page":"API","title":"StatsAPI.dof_residual","text":"dof_residual(aov::AnovaResult{<: Tuple})\ndof_residual(aov::AnovaResult)\ndof_residual(aov::AnovaResult{<: MixedModel, FTest})\n\nDegree of freedom of residuals. Default is applying dof_residual to models in aov.model. For MixedModels applying FTest, it is calculated by between-within method. See calcdof for details.\n\n\n\n\n\n","category":"function"},{"location":"API/#StatsAPI.nobs","page":"API","title":"StatsAPI.nobs","text":"nobs(aov::AnovaResult{<: Tuple})\nnobs(aov::AnovaResult)\n\nApply nobs to all models in aov.model\n\n\n\n\n\n","category":"function"},{"location":"API/#Miscellaneous","page":"API","title":"Miscellaneous","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"canonicalgoodnessoffit\ncalcdof","category":"page"},{"location":"API/#MixedAnova.canonicalgoodnessoffit","page":"API","title":"MixedAnova.canonicalgoodnessoffit","text":"canonicalgoodnessoffit(::FixDispDist) = LRT\ncanonicalgoodnessoffit(::UnivariateDistribution) = FTest\n\nconst FixDispDist = Union{Bernoulli, Binomial, Poisson}\n\nReturn LRT if the distribution has a fixed dispersion.\n\n\n\n\n\n","category":"function"},{"location":"API/#MixedAnova.calcdof","page":"API","title":"MixedAnova.calcdof","text":"calcdof(model::LinearMixedModel)\n\nCalculate degree of freedom of factors and residuals for linear mixed effect models DOF of residuals are estimated by between-within method:     dofᵢ = nobsᵢ - dofᵢ₋₁ - nfixᵢ\n\n\n\n\n\n","category":"function"}]
}
